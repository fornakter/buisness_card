(function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):(e=e||self,t(e.msgpackr={}))})(this,function(e){"use strict";var t=Math.floor;function n(e){try{if(!F.trusted&&!q){let e=M.sharedLength||0;e<M.length&&(M.length=e)}let t;if(F.randomAccessStructure&&64>R[T]&&32<=R[T]&&Y?(t=Y(R,T,E,F),R=null,!(e&&e.lazy)&&t&&(t=t.toJSON()),T=E):t=s(),C&&(// bundled strings to skip past
T=C.postBundlePosition),T==E)M&&M.restoreStructures&&r(),M=null,R=null,D&&(D=null);else if(T>E)// over read
throw new Error("Unexpected end of MessagePack data");else if(!q)throw new Error("Data read, but end of buffer not reached "+JSON.stringify(t).slice(0,100));// else more to read, but we are reading sequentially, so don't clear source yet
return t}catch(e){throw M&&M.restoreStructures&&r(),m(),(e instanceof RangeError||e.message.startsWith("Unexpected end of buffer")||T>E)&&(e.incomplete=!0),e}}function r(){for(let e in M.restoreStructures)M[e]=M.restoreStructures[e];M.restoreStructures=null}function s(){let e=R[T++];if(160>e){if(!(128>e)){if(!(144>e)){e-=144;let t=Array(e);for(let n=0;n<e;n++)t[n]=s();return F.freezeData?Object.freeze(t):t}if(e-=128,F.mapsAsObjects){let t={};for(let n,r=0;r<e;r++)n=h(),"__proto__"===n&&(n="__proto_"),t[n]=s();return t}else{let t=new Map;for(let n=0;n<e;n++)t.set(s(),s());return t}}else if(64>e)return e;else{let t=M[63&e]||F.getStructures&&o()[63&e];return t?(t.read||(t.read=i(t,63&e)),t.read()):e}}else if(192>e){// fixstr
let t=e-160;if(v>=T)return B.slice(T-z,(T+=t)-z);if(0==v&&140>E){// for small blocks, avoiding the overhead of the extract call is helpful
let e=16>t?g(t):c(t);if(null!=e)return e}return K(t)}else{let t;switch(e){case 192:return null;case 193:return C?(t=s(),0<t?C[1].slice(C.position1,C.position1+=t):C[0].slice(C.position0,C.position0-=t)):W;// "never-used", return special object to denote that
case 194:return!1;case 195:return!0;case 196:if(t=R[T++],void 0===t)throw new Error("Unexpected end of buffer");return l(t);case 197:return t=P.getUint16(T),T+=2,l(t);case 198:return t=P.getUint32(T),T+=4,l(t);case 199:// ext 8
return f(R[T++]);case 200:return t=P.getUint16(T),T+=2,f(t);case 201:return t=P.getUint32(T),T+=4,f(t);case 202:if(t=P.getFloat32(T),2<F.useFloat32){// this does rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved
let e=ie[(127&R[T])<<1|R[T+1]>>7];return T+=4,(e*t+(0<t?.5:-.5)>>0)/e}return T+=4,t;case 203:return t=P.getFloat64(T),T+=8,t;// uint handlers
case 204:return R[T++];case 205:return t=P.getUint16(T),T+=2,t;case 206:return t=P.getUint32(T),T+=4,t;case 207:return F.int64AsNumber?(t=4294967296*P.getUint32(T),t+=P.getUint32(T+4)):t=P.getBigUint64(T),T+=8,t;// int handlers
case 208:return P.getInt8(T++);case 209:return t=P.getInt16(T),T+=2,t;case 210:return t=P.getInt32(T),T+=4,t;case 211:return F.int64AsNumber?(t=4294967296*P.getInt32(T),t+=P.getUint32(T+4)):t=P.getBigInt64(T),T+=8,t;case 212:if(t=R[T++],114==t)return ne(63&R[T++]);else{let e=N[t];if(e)return e.read?(T++,e.read(s())):e.noBuffer?(T++,e()):e(R.subarray(T,++T));throw new Error("Unknown extension "+t)}case 213:return t=R[T],114==t?(T++,ne(63&R[T++],R[T++])):f(2);case 214:// fixext 4
return f(4);case 215:// fixext 8
return f(8);case 216:// fixext 16
return f(16);case 217:return t=R[T++],v>=T?B.slice(T-z,(T+=t)-z):Q(t);case 218:return t=P.getUint16(T),T+=2,v>=T?B.slice(T-z,(T+=t)-z):X(t);case 219:return t=P.getUint32(T),T+=4,v>=T?B.slice(T-z,(T+=t)-z):Z(t);case 220:return t=P.getUint16(T),T+=2,u(t);case 221:return t=P.getUint32(T),T+=4,u(t);case 222:return t=P.getUint16(T),T+=2,d(t);case 223:return t=P.getUint32(T),T+=4,d(t);default:// negative int
if(224<=e)return e-256;if(void 0===e){let e=new Error("Unexpected end of MessagePack data");throw e.incomplete=!0,e}throw new Error("Unknown MessagePack token "+e);}}}function i(e,t){function n(){// This initial function is quick to instantiate, but runs slower. After several iterations pay the cost to build the faster function
if(n.count++>$){let n=e.read=new Function("r","return function(){return "+(F.freezeData?"Object.freeze":"")+"({"+e.map(e=>"__proto__"===e?"__proto_:r()":G.test(e)?e+":r()":"["+JSON.stringify(e)+"]:r()").join(",")+"})}")(s);return 0===e.highByte&&(e.read=H(t,e.read)),n();// second byte is already read, if there is one so immediately read object
}let r={};for(let t,n=0,i=e.length;n<i;n++)t=e[n],"__proto__"===t&&(t="__proto_"),r[t]=s();return F.freezeData?Object.freeze(r):r}return n.count=0,0===e.highByte?H(t,n):n}function o(){let e=y(()=>(R=null,F.getStructures()));return M=F._mergeStructures(e,M)}function a(e){let t;if(16>e&&(t=g(e)))return t;if(64<e&&x)return x.decode(R.subarray(T,T+=e));const n=T+e,r=[];for(t="";T<n;){const e=R[T++];if(0==(128&e))r.push(e);else if(192==(224&e)){// 2 bytes
const t=63&R[T++];r.push((31&e)<<6|t)}else if(224==(240&e)){// 3 bytes
const t=63&R[T++],n=63&R[T++];r.push((31&e)<<12|t<<6|n)}else if(240==(248&e)){// 4 bytes
const t=63&R[T++],n=63&R[T++],s=63&R[T++];let i=(7&e)<<18|t<<12|n<<6|s;65535<i&&(i-=65536,r.push(55296|1023&i>>>10),i=56320|1023&i),r.push(i)}else r.push(e);4096<=r.length&&(t+=ee.apply(String,r),r.length=0)}return 0<r.length&&(t+=ee.apply(String,r)),t}function u(e){let t=Array(e);for(let n=0;n<e;n++)t[n]=s();return F.freezeData?Object.freeze(t):t}function d(e){if(F.mapsAsObjects){let t={};for(let n,r=0;r<e;r++)n=h(),"__proto__"===n&&(n="__proto_"),t[n]=s();return t}else{let t=new Map;for(let n=0;n<e;n++)t.set(s(),s());return t}}function c(e){let t=T,n=Array(e);for(let r=0;r<e;r++){const e=R[T++];if(0<(128&e))return void(T=t);n[r]=e}return ee.apply(String,n)}function g(t){if(4>t){if(!(2>t)){let e=R[T++],n=R[T++];if(0<(128&e)||0<(128&n))return void(T-=2);if(3>t)return ee(e,n);let r=R[T++];return 0<(128&r)?void(T-=3):ee(e,n,r)}if(0===t)return"";else{let e=R[T++];return 1<(128&e)?void(T-=1):ee(e)}}else{let r=R[T++],s=R[T++],a=R[T++],u=R[T++];if(0<(128&r)||0<(128&s)||0<(128&a)||0<(128&u))return void(T-=4);if(6>t){if(4===t)return ee(r,s,a,u);else{let t=R[T++];return 0<(128&t)?void(T-=5):ee(r,s,a,u,t)}}else if(8>t){let n=R[T++],e=R[T++];if(0<(128&n)||0<(128&e))return void(T-=6);if(7>t)return ee(r,s,a,u,n,e);let i=R[T++];return 0<(128&i)?void(T-=7):ee(r,s,a,u,n,e,i)}else{let d=R[T++],e=R[T++],c=R[T++],g=R[T++];if(0<(128&d)||0<(128&e)||0<(128&c)||0<(128&g))return void(T-=8);if(10>t){if(8===t)return ee(r,s,a,u,d,e,c,g);else{let t=R[T++];return 0<(128&t)?void(T-=9):ee(r,s,a,u,d,e,c,g,t)}}else if(12>t){let n=R[T++],i=R[T++];if(0<(128&n)||0<(128&i))return void(T-=10);if(11>t)return ee(r,s,a,u,d,e,c,g,n,i);let o=R[T++];return 0<(128&o)?void(T-=11):ee(r,s,a,u,d,e,c,g,n,i,o)}else{let p=R[T++],i=R[T++],f=R[T++],h=R[T++];if(0<(128&p)||0<(128&i)||0<(128&f)||0<(128&h))return void(T-=12);if(!(14>t)){let l=R[T++],y=R[T++];if(0<(128&l)||0<(128&y))return void(T-=14);if(15>t)return ee(r,s,a,u,d,e,c,g,p,i,f,h,l,y);let n=R[T++];return 0<(128&n)?void(T-=15):ee(r,s,a,u,d,e,c,g,p,i,f,h,l,y,n)}if(12===t)return ee(r,s,a,u,d,e,c,g,p,i,f,h);else{let t=R[T++];return 0<(128&t)?void(T-=13):ee(r,s,a,u,d,e,c,g,p,i,f,h,t)}}}}}function p(){let e,t=R[T++];if(192>t)// fixstr
e=t-160;else switch(t){case 217:e=R[T++];break;case 218:e=P.getUint16(T),T+=2;break;case 219:e=P.getUint32(T),T+=4;break;default:throw new Error("Expected string");}return a(e)}function l(e){return F.copyBuffers?// specifically use the copying slice (not the node one)
Uint8Array.prototype.slice.call(R,T,T+=e):R.subarray(T,T+=e)}function f(e){let t=R[T++];if(N[t]){let n;return N[t](R.subarray(T,n=T+=e),e=>{T=e;try{return s()}finally{T=n}})}throw new Error("Unknown extension type "+t)``}function h(){let e=R[T++];if(160<=e&&192>e){if(e-=160,v>=T)// if it has been extracted, must use it (and faster anyway)
return B.slice(T-z,(T+=e)-z);if(!(0==v&&180>E))return K(e)}else return T--,s().toString();let t,n=4095&(e<<5^(1<e?P.getUint16(T):0<e?R[T]:0)),r=te[n],o=T,a=T+e-3,u=0;if(r&&r.bytes==e){for(;o<a;){if(t=P.getUint32(o),t!=r[u++]){o=1879048192;break}o+=4}for(a+=3;o<a;)if(t=R[o++],t!=r[u++]){o=1879048192;break}if(o===a)return T=o,r.string;a-=3,o=T}for(r=[],te[n]=r,r.bytes=e;o<a;)t=P.getUint32(o),r.push(t),o+=4;for(a+=3;o<a;)t=R[o++],r.push(t);// for small blocks, avoiding the overhead of the extract call is helpful
let d=16>e?g(e):c(e);return null==d?r.string=K(e):r.string=d}// the registration of the record definition extension (as "r")
// notepack defines extension 0 to mean undefined, so use that as the default here
// registration of bulk record definition?
// currentExtensions[0x52] = () =>
function y(e){let t=E,n=T,r=z,s=v,i=B,o=D,a=C,u=new Uint8Array(R.slice(0,E)),d=M,c=M.slice(0,M.length),g=F,p=q,l=e();return E=t,T=n,z=r,v=s,B=i,D=o,C=a,R=u,q=p,M=d,M.splice(0,M.length,...c),F=g,P=new DataView(R.buffer,R.byteOffset,R.byteLength),l}function m(){R=null,D=null,M=null}function b(e){N[e.type]=e.unpack?e.unpack:e}function S(e,t,n){let r=e.byteLength;if(256>r+1){var{target:s,position:i}=n(4+r);s[i++]=199,s[i++]=r+1}else if(65536>r+1){var{target:s,position:i}=n(5+r);s[i++]=200,s[i++]=r+1>>8,s[i++]=255&r+1}else{var{target:s,position:i,targetView:o}=n(7+r);// plus one for the type byte
s[i++]=201,o.setUint32(i,r+1),i+=4}// "t" for typed array
s[i++]=116,s[i++]=t,s.set(new Uint8Array(e.buffer,e.byteOffset,e.byteLength),i)}function U(e,t){let n=e.byteLength;var r,s;if(256>n){var{target:r,position:s}=t(n+2);r[s++]=196,r[s++]=n}else if(65536>n){var{target:r,position:s}=t(n+3);r[s++]=197,r[s++]=n>>8,r[s++]=255&n}else{var{target:r,position:s,targetView:i}=t(n+5);r[s++]=198,i.setUint32(s,n),s+=4}r.set(e,s)}function k(e,t,n,r){let s=e.length;return 1===s?t[n++]=212:2===s?t[n++]=213:4===s?t[n++]=214:8===s?t[n++]=215:16===s?t[n++]=216:256>s?(t[n++]=199,t[n++]=s):65536>s?(t[n++]=200,t[n++]=s>>8,t[n++]=255&s):(t[n++]=201,t[n++]=s>>24,t[n++]=255&s>>16,t[n++]=255&s>>8,t[n++]=255&s),t[n++]=r,t.set(e,n),n+=s,n}function _(e,t){// insert the ids that need to be referenced for structured clones
let n,r=6*t.length,s=e.length-r;for(;n=t.pop();){let t=n.offset,i=n.id;e.copyWithin(t+r,t,s),r-=6;let o=t+r;// 'i'
e[o++]=214,e[o++]=105,e[o++]=i>>24,e[o++]=255&i>>16,e[o++]=255&i>>8,e[o++]=255&i,s=t}return e}function I(e,t,n){if(0<we.length){_e.setUint32(we.position+e,Ae+n-we.position-e),we.stringsPosition=Ae-e;let r=we;we=null,t(r[0]),t(r[1])}}function O(e){if(e.Class){if(!e.pack&&!e.write)throw new Error("Extension has no pack or write function");if(e.pack&&!e.type)throw new Error("Extension has no type (numeric code to identify the extension)");he.unshift(e.Class),fe.unshift(e)}b(e)}function A(e,t){return e.isCompatible=e=>{let n=!e||(t.lastNamedStructuresLength||0)===e.length;return n||// we want to merge these existing structures immediately since we already have it and we are in the right transaction
t._mergeStructures(e),n},e}function*w(e,t){const n=new xe(t);for(const r of e)yield n.pack(r)}async function*L(e,t){const n=new xe(t);for await(const r of e)yield n.pack(r)}/**
	 * Given an Iterable/Iterator input which yields buffers, returns an IterableIterator which yields sync decoded objects
	 * Or, given an Async Iterable/Iterator which yields promises resolving in buffers, returns an AsyncIterableIterator.
	 * @param {Iterable|Iterator|AsyncIterable|AsyncIterableIterator} bufferIterator
	 * @param {object} [options] - unpackr options
	 * @returns {IterableIterator|Promise.<AsyncIterableIterator}
	 */var x;try{x=new TextDecoder}catch(e){}var R,E,M,B,C,D,P,T=0,F={},z=0,v=0,N=[],j={useRecords:!1,mapsAsObjects:!0};class V{}const W=new V;W.name="MessagePack 0xC1";var Y,q=!1,$=2;try{new Function("")}catch(e){// if eval variants are not supported, do not create inline object readers ever
$=1/0}class J{constructor(e){e&&(!1===e.useRecords&&e.mapsAsObjects===void 0&&(e.mapsAsObjects=!0),e.sequential&&!1!==e.trusted&&(e.trusted=!0,!e.structures&&!1!=e.useRecords&&(e.structures=[],!e.maxSharedStructures&&(e.maxSharedStructures=0))),e.structures?e.structures.sharedLength=e.structures.length:e.getStructures&&((e.structures=[]).uninitialized=!0,e.structures.sharedLength=0)),Object.assign(this,e)}unpack(e,t){if(R)// re-entrant execution, save the state and restore it after we do this unpack
return y(()=>(m(),this?this.unpack(e,t):J.prototype.unpack.call(j,e,t)));"object"==typeof t?(E=t.end||e.length,T=t.start||0):(T=0,E=-1<t?t:e.length),v=0,B=null,C=null,R=e;// this provides cached access to the data view for a buffer if it is getting reused, which is a recommend
// technique for getting data from a database where it can be copied into an existing buffer instead of creating
// new ones
try{P=e.dataView||(e.dataView=new DataView(e.buffer,e.byteOffset,e.byteLength))}catch(t){if(R=null,e instanceof Uint8Array)throw t;throw new Error("Source must be a Uint8Array or Buffer but was a "+(e&&"object"==typeof e?e.constructor.name:typeof e))}if(this instanceof J){if(F=this,this.structures)return M=this.structures,n(t);(!M||0<M.length)&&(M=[])}else F=j,(!M||0<M.length)&&(M=[]);return n(t)}unpackMultiple(e,t){let r,s=0;try{q=!0;let i=e.length,o=this?this.unpack(e,i):oe.unpack(e,i);if(t){for(t(o);T<i;)if(s=T,!1===t(n()))return;}else{for(r=[o];T<i;)s=T,r.push(n());return r}}catch(e){throw e.lastPosition=s,e.values=r,e}finally{q=!1,m()}}_mergeStructures(e,t){e=e||[],Object.isFrozen(e)&&(e=e.map(e=>e.slice(0)));for(let n,r=0,s=e.length;r<s;r++)n=e[r],n&&(n.isShared=!0,32<=r&&(n.highByte=r-32>>5));for(let n in e.sharedLength=e.length,t||[])if(0<=n){let r=e[n],s=t[n];s&&(r&&((e.restoreStructures||(e.restoreStructures=[]))[n]=r),e[n]=s)}return this.structures=e}decode(e,t){return this.unpack(e,t)}}const G=/^[a-zA-Z_$][a-zA-Z\d_$]*$/,H=(e,t)=>function(){let n=R[T++];if(0===n)return t();let r=32>e?-(e+(n<<5)):e+(n<<5),s=M[r]||o()[r];if(!s)throw new Error("Record id is not defined for "+r);return s.read||(s.read=i(s,e)),s.read()};var K=a,Q=a,X=a,Z=a;var ee=String.fromCharCode,te=Array(4096);const ne=(e,t)=>{let n=s().map(e=>e.toString()),r=e;// ensure that all keys are strings and that the array is mutable
void 0!==t&&(e=32>e?-((t<<5)+e):(t<<5)+e,n.highByte=t);let o=M[e];return o&&o.isShared&&((M.restoreStructures||(M.restoreStructures=[]))[e]=o),M[e]=n,n.read=i(n,r),n.read()};N[0]=()=>{},N[0].noBuffer=!0,N[101]=()=>{let e=s();return(globalThis[e[0]]||Error)(e[1])},N[105]=()=>{// id extension (for structured clones)
let e=P.getUint32(T-4);D||(D=new Map);let t,n=R[T];t=144<=n&&160>n||220==n||221==n?[]:{};let r={target:t};// a placeholder object
D.set(e,r);let i=s();// read the next value as the target object to id
return r.used?Object.assign(t,i):(r.target=i,i);// no cycle, can just use the returned read object
},N[112]=()=>{// pointer extension (for structured clones)
let e=P.getUint32(T-4),t=D.get(e);return t.used=!0,t.target},N[115]=()=>new Set(s());const re=["Int8","Uint8","Uint8Clamped","Int16","Uint16","Int32","Uint32","Float32","Float64","BigInt64","BigUint64"].map(e=>e+"Array");N[116]=e=>{let t=e[0],n=re[t];if(!n)throw new Error("Could not find typed array for code "+t);// we have to always slice/copy here to get a new ArrayBuffer that is word/byte aligned
return new globalThis[n](Uint8Array.prototype.slice.call(e,1).buffer)},N[120]=()=>{let e=s();return new RegExp(e[0],e[1])};const se=[];N[98]=e=>{let t=(e[0]<<24)+(e[1]<<16)+(e[2]<<8)+e[3],n=T;return T+=t-e.length,C=se,C=[p(),p()],C.position0=0,C.position1=0,C.postBundlePosition=T,T=n,s()},N[255]=e=>4==e.length?new Date(1e3*(16777216*e[0]+(e[1]<<16)+(e[2]<<8)+e[3])):8==e.length?new Date(((e[0]<<22)+(e[1]<<14)+(e[2]<<6)+(e[3]>>2))/1e6+1e3*(4294967296*(3&e[3])+16777216*e[4]+(e[5]<<16)+(e[6]<<8)+e[7])):12==e.length?new Date(((e[0]<<24)+(e[1]<<16)+(e[2]<<8)+e[3])/1e6+1e3*((128&e[4]?-281474976710656:0)+1099511627776*e[6]+4294967296*e[7]+16777216*e[8]+(e[9]<<16)+(e[10]<<8)+e[11])):new Date("invalid");const ie=Array(147);// this is a table matching binary exponents to the multiplier to determine significant digit rounding
for(let n=0;256>n;n++)ie[n]=+("1e"+t(45.15-.30103*n));var oe=new J({useRecords:!1});const ae=oe.unpack,ue=oe.unpackMultiple,de=oe.unpack,ce={NEVER:0,ALWAYS:1,DECIMAL_ROUND:3,DECIMAL_FIT:4};let ge,pe=new Float32Array(1),le=new Uint8Array(pe.buffer,0,4);try{ge=new TextEncoder}catch(e){}let fe,he;const ye="undefined"!=typeof Buffer,me=ye?function(e){return Buffer.allocUnsafeSlow(e)}:Uint8Array,be=ye?Buffer:Uint8Array,Se=ye?4294967296:2144337920;let Ue,ke,_e,Ie,Oe,Ae=0,we=null;const Le=Symbol("record-id");class xe extends J{constructor(e){super(e),this.offset=0;let t,n,r,s,i=be.prototype.utf8Write?function(e,t){return Ue.utf8Write(e,t,4294967295)}:!!(ge&&ge.encodeInto)&&function(e,t){return ge.encodeInto(e,Ue.subarray(t)).written},o=this;e||(e={});let a=e&&e.sequential,u=e.structures||e.saveStructures,d=e.maxSharedStructures;if(null==d&&(d=u?32:0),8160<d)throw new Error("Maximum maxSharedStructure is 8160");e.structuredClone&&null==e.moreTypes&&(e.moreTypes=!0);let c=e.maxOwnStructures;null==c&&(c=u?32:64),this.structures||!1==e.useRecords||(this.structures=[]);// two byte record ids for shared structures
let g=32<d||64<c+d,p=d+64,l=d+c+64;if(8256<l)throw new Error("Maximum maxSharedStructure + maxOwnStructure is 8192");let f=[],h=0,y=0;this.pack=this.encode=function(e,i){if(Ue||(Ue=new me(8192),_e=Ue.dataView=new DataView(Ue.buffer,0,8192),Ae=0),Ie=Ue.length-10,2048>Ie-Ae?(Ue=new me(Ue.length),_e=Ue.dataView=new DataView(Ue.buffer,0,Ue.length),Ie=Ue.length-10,Ae=0):Ae=2147483640&Ae+7,t=Ae,s=o.structuredClone?new Map:null,o.bundleStrings&&"string"!=typeof e?(we=[],we.size=1/0):we=null,r=o.structures,r){r.uninitialized&&(r=o._mergeStructures(o.getStructures()));let e=r.sharedLength||0;if(e>d)//if (maxSharedStructures <= 32 && structures.sharedLength > 32) // TODO: could support this, but would need to update the limit ids
throw new Error("Shared structures is larger than maximum shared structures, try increasing maxSharedStructures to "+r.sharedLength);if(!r.transitions){r.transitions=Object.create(null);for(let t,n=0;n<e;n++){if(t=r[n],!t)continue;let e,s=r.transitions;for(let n,r=0,i=t.length;r<i;r++)n=t[r],e=s[n],e||(e=s[n]=Object.create(null)),s=e;s[Le]=n+64}this.lastNamedStructuresLength=e}a||(r.nextId=e+64)}n&&(n=!1);try{o.randomAccessStructure&&e.constructor&&e.constructor===Object?w(e):m(e);let n=we;if(we&&I(t,m,0),s&&s.idsToInsert){let e=s.idsToInsert.sort((e,t)=>e.offset>t.offset?1:-1),r=e.length,i=-1;for(;n&&0<r;){let s=e[--r].offset+t;s<n.stringsPosition+t&&-1===i&&(i=0),s>n.position+t?0<=i&&(i+=6):(0<=i&&(_e.setUint32(n.position+t,_e.getUint32(n.position+t)+i),i=-1),n=n.previous,r++)}0<=i&&n&&_e.setUint32(n.position+t,_e.getUint32(n.position+t)+i),Ae+=6*e.length,Ae>Ie&&S(Ae),o.offset=Ae;let a=_(Ue.subarray(t,Ae),e);return s=null,a}// update the offset so next serialization doesn't write over our buffer, but can continue writing to same buffer sequentially
return o.offset=Ae,i&Te?(Ue.start=t,Ue.end=Ae,Ue):Ue.subarray(t,Ae);// position can change if we call pack again in saveStructures, so we get the buffer now
}finally{if(r){10>y&&y++;let s=r.sharedLength||0;if(r.length>s&&(r.length=s),1e4<h)r.transitions=null,y=0,h=0,0<f.length&&(f=[]);else if(0<f.length&&!a){for(let e=0,t=f.length;e<t;e++)f[e][Le]=0;f=[]}if(n&&o.saveStructures){// we can't rely on start/end with REUSE_BUFFER_MODE since they will (probably) change when we save
let n=Ue.subarray(t,Ae),i=A(r,o);return!1===o.saveStructures(i,i.isCompatible)?o.pack(e):(o.lastNamedStructuresLength=s,n)}}i&Fe&&(Ae=t)}};const m=e=>{Ae>Ie&&(Ue=S(Ae));var n,r=typeof e;if("string"==r){let r=e.length;if(we&&4<=r&&4096>r){if((we.size+=r)>61440){let e,n=(we[0]?3*we[0].length+we[1].length:0)+10;Ae+n>Ie&&(Ue=S(Ae+n));let r;we.position?(r=we,Ue[Ae]=200,Ae+=3,Ue[Ae++]=98,e=Ae-t,Ae+=4,I(t,m,0),_e.setUint16(e+t-3,Ae-t-e)):(Ue[Ae++]=214,Ue[Ae++]=98,e=Ae-t,Ae+=4),we=["",""],we.previous=r,we.size=0,we.position=e}let n=/[\u0080-\uFFFF]/.test(e);return we[n?0:1]+=e,Ue[Ae++]=193,void m(n?-r:r)}let s=32>r?1:256>r?2:65536>r?3:5;// first we estimate the header size, so we can write to the correct location
let o=3*r;if(Ae+o>Ie&&(Ue=S(Ae+o)),64>r||!i){let t,i,o,a=Ae+s;for(t=0;t<r;t++)i=e.charCodeAt(t),128>i?Ue[a++]=i:2048>i?(Ue[a++]=192|i>>6,Ue[a++]=128|63&i):55296==(64512&i)&&56320==(64512&(o=e.charCodeAt(t+1)))?(i=65536+((1023&i)<<10)+(1023&o),t++,Ue[a++]=240|i>>18,Ue[a++]=128|63&i>>12,Ue[a++]=128|63&i>>6,Ue[a++]=128|63&i):(Ue[a++]=224|i>>12,Ue[a++]=128|63&i>>6,Ue[a++]=128|63&i);n=a-Ae-s}else n=i(e,Ae+s);32>n?Ue[Ae++]=160|n:256>n?(2>s&&Ue.copyWithin(Ae+2,Ae+1,Ae+1+n),Ue[Ae++]=217,Ue[Ae++]=n):65536>n?(3>s&&Ue.copyWithin(Ae+3,Ae+2,Ae+2+n),Ue[Ae++]=218,Ue[Ae++]=n>>8,Ue[Ae++]=255&n):(5>s&&Ue.copyWithin(Ae+5,Ae+3,Ae+3+n),Ue[Ae++]=219,_e.setUint32(Ae,n),Ae+=4),Ae+=n}else if("number"===r){if(e>>>0===e)32>e||128>e&&!1===this.useRecords||64>e&&!this.randomAccessStructure?Ue[Ae++]=e:256>e?(Ue[Ae++]=204,Ue[Ae++]=e):65536>e?(Ue[Ae++]=205,Ue[Ae++]=e>>8,Ue[Ae++]=255&e):(Ue[Ae++]=206,_e.setUint32(Ae,e),Ae+=4);else if(e>>0===e)-32<=e?Ue[Ae++]=256+e:-128<=e?(Ue[Ae++]=208,Ue[Ae++]=e+256):-32768<=e?(Ue[Ae++]=209,_e.setInt16(Ae,e),Ae+=2):(Ue[Ae++]=210,_e.setInt32(Ae,e),Ae+=4);else{let t;if(0<(t=this.useFloat32)&&4294967296>e&&-2147483648<=e){Ue[Ae++]=202,_e.setFloat32(Ae,e);let n;if(4>t||// this checks for rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved
(n=e*ie[(127&Ue[Ae])<<1|Ue[Ae+1]>>7])>>0===n)return void(Ae+=4);// move back into position for writing a double
Ae--}Ue[Ae++]=203,_e.setFloat64(Ae,e),Ae+=8}}else if("object"===r){if(!e)Ue[Ae++]=192;else{if(s){let n=s.get(e);if(n){if(!n.id){let e=s.idsToInsert||(s.idsToInsert=[]);n.id=e.push(n)}return Ue[Ae++]=214,Ue[Ae++]=112,_e.setUint32(Ae,n.id),void(Ae+=4)}s.set(e,{offset:Ae-t})}let r=e.constructor;if(r===Object)b(e,!0);else if(r===Array){n=e.length,16>n?Ue[Ae++]=144|n:65536>n?(Ue[Ae++]=220,Ue[Ae++]=n>>8,Ue[Ae++]=255&n):(Ue[Ae++]=221,_e.setUint32(Ae,n),Ae+=4);for(let t=0;t<n;t++)m(e[t])}else if(r===Map){n=e.size,16>n?Ue[Ae++]=128|n:65536>n?(Ue[Ae++]=222,Ue[Ae++]=n>>8,Ue[Ae++]=255&n):(Ue[Ae++]=223,_e.setUint32(Ae,n),Ae+=4);for(let[t,n]of e)m(t),m(n)}else{for(let t,n=0,r=fe.length;n<r;n++)if(t=he[n],e instanceof t){let t=fe[n];if(t.write)return t.type&&(Ue[Ae++]=212,Ue[Ae++]=t.type,Ue[Ae++]=0),void m(t.write.call(this,e));let r=Ue,s=_e,i=Ae;Ue=null;let o;try{o=t.pack.call(this,e,e=>(Ue=r,r=null,Ae+=e,Ae>Ie&&S(Ae),{target:Ue,targetView:_e,position:Ae-e}),m)}finally{r&&(Ue=r,_e=s,Ae=i,Ie=Ue.length-10)}return void(o&&(o.length+Ae>Ie&&S(o.length+Ae),Ae=k(o,Ue,Ae,t.type)))}// no extension found, write as object
b(e,!e.hasOwnProperty)}}}else if("boolean"===r)Ue[Ae++]=e?195:194;else if("bigint"===r){if(e<BigInt(1)<<BigInt(63)&&e>=-(BigInt(1)<<BigInt(63)))Ue[Ae++]=211,_e.setBigInt64(Ae,e);else if(e<BigInt(1)<<BigInt(64)&&0<e)Ue[Ae++]=207,_e.setBigUint64(Ae,e);else// overflow
if(this.largeBigIntToFloat)Ue[Ae++]=203,_e.setFloat64(Ae,+e);else throw new RangeError(e+" was too large to fit in MessagePack 64-bit integer format, set largeBigIntToFloat to convert to float-64");Ae+=8}else if("undefined"===r)this.encodeUndefinedAsNil?Ue[Ae++]=192:(Ue[Ae++]=212,Ue[Ae++]=0,Ue[Ae++]=0);else if("function"===r)m(this.writeFunction&&this.writeFunction());else throw new Error("Unknown type: "+r)},b=!1===this.useRecords?this.variableMapSize?e=>{// this method is slightly slower, but generates "preferred serialization" (optimally small for smaller objects)
let t=Object.keys(e),n=t.length;16>n?Ue[Ae++]=128|n:65536>n?(Ue[Ae++]=222,Ue[Ae++]=n>>8,Ue[Ae++]=255&n):(Ue[Ae++]=223,_e.setUint32(Ae,n),Ae+=4);let r;for(let s=0;s<n;s++)m(r=t[s]),m(e[r])}:(e,n)=>{Ue[Ae++]=222;// always using map 16, so we can preallocate and set the length afterwards
let r=Ae-t;Ae+=2;let s=0;for(let t in e)(n||e.hasOwnProperty(t))&&(m(t),m(e[t]),s++);Ue[r++ +t]=s>>8,Ue[r+t]=255&s}:e.progressiveRecords&&!g?// this is about 2% faster for highly stable structures, since it only requires one for-in loop (but much more expensive when new structure needs to be written)
(e,n)=>{let s,i,o=r.transitions||(r.transitions=Object.create(null)),a=Ae++-t;for(let u in e)if(n||e.hasOwnProperty(u)){if(s=o[u],s)o=s;else{// record doesn't exist, create full new record and insert it
let n=Object.keys(e),d=o;o=r.transitions;let c=0;for(let e,t=0,r=n.length;t<r;t++)e=n[t],s=o[e],s||(s=o[e]=Object.create(null),c++),o=s;a+t+1==Ae?(Ae--,U(o,n,c)):// otherwise we need to insert the record, moving existing data after the record
O(o,n,a,c),i=!0,o=d[u]}m(e[u])}if(!i){let n=o[Le];n?Ue[a+t]=n:O(o,Object.keys(e),a,0)}}:(e,t)=>{let n,s=r.transitions||(r.transitions=Object.create(null)),i=0;for(let r in e)(t||e.hasOwnProperty(r))&&(n=s[r],n||(n=s[r]=Object.create(null),i++),s=n);let o=s[Le];// now write the values
for(let n in o?96<=o&&g?(Ue[Ae++]=(31&(o-=96))+96,Ue[Ae++]=o>>5):Ue[Ae++]=o:U(s,s.__keys__||Object.keys(e),i),e)(t||e.hasOwnProperty(n))&&m(e[n])},S=e=>{var n=Math.min,r=Math.round,s=Math.max;let i;if(16777216<e){// special handling for really large buffers
if(e-t>Se)throw new Error("Packed buffer would be larger than maximum buffer size");i=n(Se,4096*r(s((e-t)*(67108864<e?1.25:2),4194304)/4096))}else// faster handling for smaller buffers
i=(s(e-t<<2,Ue.length-1)>>12)+1<<12;let o=new me(i);return _e=o.dataView=new DataView(o.buffer,0,i),e=n(e,Ue.length),Ue.copy?Ue.copy(o,0,t,e):o.set(Ue.slice(t,e)),Ae-=t,t=0,Ie=o.length-10,Ue=o},U=(e,t,s)=>{let i=r.nextId;i||(i=64),i<p&&this.shouldShareStructure&&!this.shouldShareStructure(t)?(i=r.nextOwnId,!(i<l)&&(i=p),r.nextOwnId=i+1):(i>=l&&(// cycle back around
i=p),r.nextId=i+1);let o=t.highByte=96<=i&&g?i-96>>5:-1;e[Le]=i,e.__keys__=t,r[i-64]=t,i<p?(t.isShared=!0,r.sharedLength=i-63,n=!0,0<=o?(Ue[Ae++]=(31&i)+96,Ue[Ae++]=o):Ue[Ae++]=i):(0<=o?(Ue[Ae++]=213,Ue[Ae++]=114,Ue[Ae++]=(31&i)+96,Ue[Ae++]=o):(Ue[Ae++]=212,Ue[Ae++]=114,Ue[Ae++]=i),s&&(h+=y*s),f.length>=c&&(f.shift()[Le]=0),f.push(e),m(t))},O=(e,n,r,s)=>{let i=Ue,o=Ae,a=Ie,u=t;Ue=ke,Ae=0,t=0,Ue||(ke=Ue=new me(8192)),Ie=Ue.length-10,U(e,n,s),ke=Ue;let d=Ae;if(Ue=i,Ae=o,Ie=a,t=u,1<d){let e=Ae+d-1;e>Ie&&S(e);let n=r+t;Ue.copyWithin(n+d,n+1,Ae),Ue.set(ke.slice(0,d),n),Ae=e}else Ue[r+t]=ke[0]},w=e=>{let t=Oe();return 0===t?b(e,!0):void(Ae=t)}}useBuffer(e){// this means we are finished using our own buffer and we can write over it safely
Ue=e,_e=new DataView(Ue.buffer,Ue.byteOffset,Ue.byteLength),Ae=0}clearSharedData(){this.structures&&(this.structures=[]),this.typedStructs&&(this.typedStructs=[])}}he=[Date,Set,Error,RegExp,ArrayBuffer,Object.getPrototypeOf(Uint8Array.prototype).constructor/*TypedArray*/,V],fe=[{pack(e,n,r){let s=e.getTime()/1e3;if((this.useTimestamp32||0===e.getMilliseconds())&&0<=s&&4294967296>s){// Timestamp 32
let{target:e,targetView:t,position:r}=n(6);e[r++]=214,e[r++]=255,t.setUint32(r,s)}else if(0<s&&4294967296>s){// Timestamp 64
let{target:t,targetView:r,position:i}=n(10);t[i++]=215,t[i++]=255,r.setUint32(i,4e6*e.getMilliseconds()+(s/1e3/4294967296>>0)),r.setUint32(i+4,s)}else if(isNaN(s)){if(this.onInvalidDate)return n(0),r(this.onInvalidDate());// Intentionally invalid timestamp
let{target:e,targetView:t,position:s}=n(3);e[s++]=212,e[s++]=255,e[s++]=255}else{// Timestamp 96
let{target:r,targetView:i,position:o}=n(15);r[o++]=199,r[o++]=12,r[o++]=255,i.setUint32(o,1e6*e.getMilliseconds()),i.setBigInt64(o+4,BigInt(t(s)))}}},{pack(e,t,n){let r=Array.from(e),{target:s,position:i}=t(this.moreTypes?3:0);this.moreTypes&&(s[i++]=212,s[i++]=115,s[i++]=0),n(r)}},{pack(e,t,n){let{target:r,position:s}=t(this.moreTypes?3:0);this.moreTypes&&(r[s++]=212,r[s++]=101,r[s++]=0),n([e.name,e.message])}},{pack(e,t,n){let{target:r,position:s}=t(this.moreTypes?3:0);this.moreTypes&&(r[s++]=212,r[s++]=120,r[s++]=0),n([e.source,e.flags])}},{pack(e,t){this.moreTypes?S(e,16,t):U(ye?Buffer.from(e):new Uint8Array(e),t)}},{pack(e,t){let n=e.constructor;n!==be&&this.moreTypes?S(e,re.indexOf(n.name),t):U(e,t)}},{pack(e,t){// specific 0xC1 object
let{target:n,position:r}=t(1);n[r]=193}}];let Re=new xe({useRecords:!1});const Ee=Re.pack,Me=Re.pack,{NEVER:Be,ALWAYS:Ce,DECIMAL_ROUND:De,DECIMAL_FIT:Pe}=ce,Te=512,Fe=1024;e.ALWAYS=Ce,e.C1=W,e.DECIMAL_FIT=Pe,e.DECIMAL_ROUND=De,e.Decoder=J,e.Encoder=xe,e.FLOAT32_OPTIONS=ce,e.NEVER=Be,e.Packr=xe,e.REUSE_BUFFER_MODE=Te,e.Unpackr=J,e.addExtension=O,e.clearSource=m,e.decode=de,e.decodeIter=function(e,t={}){if(!e||"object"!=typeof e)throw new Error("first argument must be an Iterable, Async Iterable, Iterator, Async Iterator, or a promise");const n=new J(t);let r;const s=e=>{let t;// if there's incomplete data from previous chunk, concatinate and try again
r&&(e=Buffer.concat([r,e]),r=void 0);try{t=n.unpackMultiple(e)}catch(n){if(n.incomplete)r=e.slice(n.lastPosition),t=n.values;else throw n}return t};if("function"==typeof e[Symbol.iterator])return function*(){for(const t of e)yield*s(t)}();return"function"==typeof e[Symbol.asyncIterator]?async function*(){for await(const t of e)yield*s(t)}():void 0},e.encode=Me,e.encodeIter=/**
	 * Given an Iterable first argument, returns an Iterable where each value is packed as a Buffer
	 * If the argument is only Async Iterable, the return value will be an Async Iterable.
	 * @param {Iterable|Iterator|AsyncIterable|AsyncIterator} objectIterator - iterable source, like a Readable object stream, an array, Set, or custom object
	 * @param {options} [options] - msgpackr pack options
	 * @returns {IterableIterator|Promise.<AsyncIterableIterator>}
	 */function(e,t={}){if(!e||"object"!=typeof e)throw new Error("first argument must be an Iterable, Async Iterable, or a Promise for an Async Iterable");else{if("function"==typeof e[Symbol.iterator])return w(e,t);if("function"==typeof e.then||"function"==typeof e[Symbol.asyncIterator])return L(e,t);throw new Error("first argument must be an Iterable, Async Iterable, Iterator, Async Iterator, or a Promise")}},e.isNativeAccelerationEnabled=!1,e.mapsAsObjects=!0,e.pack=Ee,e.roundFloat32=function(e){pe[0]=e;let t=ie[(127&le[3])<<1|le[2]>>7];return(t*e+(0<e?.5:-.5)>>0)/t},e.unpack=ae,e.unpackMultiple=ue,e.useRecords=!1,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=index.min.js.map
